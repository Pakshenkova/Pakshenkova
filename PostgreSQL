1. Узнаем, когда была первая транзакция для каждого студента. 
Начиная с этой даты, мы будем собирать его баланс уроков. 
Создадим CTE first_payments с двумя полями: user_id и 
first_payment_date (дата первой успешной транзакции). 

***first_payments***
select user_id
    , min(date_trunc('day', transaction_datetime)) as first_payment_date
from skyeng_db.payments
where status_name = 'success'
group by user_id


2. Соберем таблицу с датами за каждый календарный день 2016 года. 
Есть разные способы это сделать, но мы воспользуемся тем, 
который уже знаем. Выберем все даты из таблицы classes, 
создадим CTE all_dates с полем dt, где будут храниться 
уникальные даты (без времени) уроков. 

***all_dates***
select distinct date_trunc('day', class_start_datetime) as dt
from skyeng_db.classes
where date_part('year', class_start_datetime) = 2016


3. Узнаем, за какие даты имеет смысл собирать баланс для каждого 
студента. Для этого объединим таблицы и создадим CTE 
all_dates_by_user, где будут храниться все даты жизни 
студента после того, как произошла его первая транзакция. 
В таблице должны быть такие поля: user_id, dt. 

***all_dates_by_user***
with all_dates as

        (select distinct date_trunc('day', class_start_datetime) as dt
        from skyeng_db.classes
        where date_part('year', class_start_datetime) = 2016)

, first_payments as

        (select user_id
            , min(date_trunc('day', transaction_datetime)) as first_payment_date
        from skyeng_db.payments
        where status_name = 'success'
        group by user_id)

select user_id
    , dt 
from all_dates  
    join first_payments
        on dt <> first_payment_date
	or dt = first_payment_date


4. Найдем все изменения балансов, связанные с успешными 
транзакциями. Выберем все транзакции из таблицы `payments`, 
сгруппируем их по `user_id` и дате транзакции (без времени) 
и найдем сумму по полю `classes`. 
В результате получим CTE `payments_by_dates` с полями: 
`user_id`, `payment_date`, `transaction_balance_change` 
(сколько уроков было начислено или списано в этот день).

***payments_by_dates***
select user_id
    , date_trunc('day', transaction_datetime) as payment_date
    , sum(classes) as transaction_balance_change
from skyeng_db.payments
where status_name = 'success'
group by user_id
    , payment_date


5. Найдем баланс студентов, который сформирован только 
транзакциями. Для этого объединим all_dates_by_user и 
payments_by_dates так, чтобы совпадали даты и user_id. 
Используем оконные выражения (функцию sum), чтобы найти 
кумулятивную сумму по полю transaction_balance_change для всех 
строк до текущей включительно с разбивкой по user_id и 
сортировкой по dt. 
В результате получим CTE payments_by_dates_cumsum с полями: 
user_id, dt, 
transaction_balance_change — transaction_balance_change_cs 
(кумулятивная сумма по transaction_balance_change). При 
подсчете кумулятивной суммы можно заменить пустые значения 
нулями.

***payments_by_dates_cumsum***
with all_dates as

        (select distinct date_trunc('day', class_start_datetime) as dt
        from skyeng_db.classes
        where date_part('year', class_start_datetime) = 2016)

, first_payments as

        (select user_id
            , min(date_trunc('day', transaction_datetime)) as first_payment_date
        from skyeng_db.payments
        where status_name = 'success'
        group by user_id)

, payments_by_dates as

        (select user_id
            , date_trunc('day', transaction_datetime) as payment_date
            , sum(classes) as transaction_balance_change
        from skyeng_db.payments
        where status_name = 'success'
        group by user_id
            , payment_date)

select first_payments.user_id
     , dt
     , case when transaction_balance_change is null then 0 else transaction_balance_change end as transaction_balance_change
     , sum(case when transaction_balance_change is null then 0 else transaction_balance_change end)
       over (partition by first_payments.user_id order by dt) as transaction_balance_change_cs
from all_dates  
    join first_payments
        on dt <> first_payment_date
	or dt = first_payment_date
    left join payments_by_dates
        on first_payments.user_id = payments_by_dates.user_id
        and dt = payment_date
        


6. Найдем изменения балансов из-за прохождения уроков. 
Создадим CTE classes_by_dates, посчитав в таблице classes 
количество уроков за каждый день для каждого ученика. 
Нас не интересуют вводные уроки и уроки со статусом, отличным 
от success и failed_by_student. 
Получим результат с такими полями: user_id, class_date, 
classes (количество пройденных в этот день уроков). Причем 
classes мы умножим на -1, чтобы отразить, что - — это списания 
с баланса.

***classes_by_dates***
select user_id
    , date_trunc('day', class_start_datetime) as class_date
    , count(*)*-1 as classes
from skyeng_db.classes
where class_status in ('success', 'failed_by_student')
    and class_type != 'trial'
group by user_id
    , class_date


7. По аналогии с уже проделанным шагом для оплат создадим CTE 
для хранения кумулятивной суммы количества пройденных уроков. 
Для этого объединим таблицы all_dates_by_user и classes_by_dates 
так, чтобы совпадали даты и user_id. Используем оконные 
выражения (функцию sum), чтобы найти кумулятивную сумму по полю 
classes для всех строк до текущей включительно с разбивкой по 
user_id и сортировкой по dt. 
В результате получим CTE classes_by_dates_dates_cumsumс полями:
user_id, dt, classes — classes_cs(кумулятивная сумма по 
classes). При подсчете кумулятивной суммы обязательно нужно 
заменить пустые значения нулями.

***classes_by_dates_cumsum***
with all_dates as

        (select distinct date_trunc('day', class_start_datetime) as dt
        from skyeng_db.classes
        where date_part('year', class_start_datetime) = 2016)

, first_payments as

        (select user_id
            , min(date_trunc('day', transaction_datetime)) as first_payment_date
        from skyeng_db.payments
        where status_name = 'success'
        group by user_id)

, classes_by_dates as

        (select user_id
            , date_trunc('day', class_start_datetime) as class_date
            , count(*)*-1 as classes
        from skyeng_db.classes
        where class_status in ('success', 'failed_by_student')
            and class_type != 'trial'
        group by user_id
            , class_date)
            
select first_payments.user_id
    , dt
    , case  when classes is null then 0 else classes end as classes
    , sum(case when classes is null then 0 else classes end) 
      over (partition by first_payments.user_id order by dt) as classes_cs
from all_dates  
    join first_payments
        on dt <> first_payment_date
	or dt = first_payment_date
    left join classes_by_dates
        on first_payments.user_id = classes_by_dates.user_id
        and dt = class_date


8. Создадим CTE `balances` с вычисленными балансами каждого
студента. Для этого объединим таблицы `payments_by_dates_cumsum`
и `classes_by_dates_dates_cumsum` так, чтобы совпадали даты и
`user_id`.
Получим такие поля: `user_id`, `dt`, 
`transaction_balance_change`, `transaction_balance_change_cs`,
`classes`, `classes_cs`, `balance` 
(`classes_cs` + `transaction_balance_change_cs`).

***balances***
with all_dates as

        (select distinct date_trunc('day', class_start_datetime) as dt
        from skyeng_db.classes
        where date_part('year', class_start_datetime) = 2016)

, first_payments as

        (select user_id
            , min(date_trunc('day', transaction_datetime)) as first_payment_date
        from skyeng_db.payments
        where status_name = 'success'
        group by user_id) 

, payments_by_dates as

        (select user_id
            , date_trunc('day', transaction_datetime) as payment_date
            , sum(classes) as transaction_balance_change
        from skyeng_db.payments
        where status_name = 'success'
        group by user_id
            , payment_date)

, classes_by_dates as

        (select user_id
            , date_trunc('day', class_start_datetime) as class_date
            , count(*)*-1 as classes
        from skyeng_db.classes
        where class_status in ('success', 'failed_by_student')
            and class_type != 'trial'
        group by user_id
            , class_date)

select first_payments.user_id
    , dt
    , case when transaction_balance_change is null then 0 else transaction_balance_change end as transaction_balance_change
    , sum(case when transaction_balance_change is null then 0 else transaction_balance_change end)
      over (partition by first_payments.user_id order by dt) as transaction_balance_change_cs
    , case  when classes is null then 0 else classes end as classes
    , sum(case when classes is null then 0 else classes end) 
      over (partition by first_payments.user_id order by dt) as classes_cs
    , sum(case when transaction_balance_change is null then 0 else transaction_balance_change end)
      over (partition by first_payments.user_id order by dt)
      +
      sum(case when classes is null then 0 else classes end) 
      over (partition by first_payments.user_id order by dt) as balance

from all_dates
    join first_payments
        on dt = first_payment_date
        or dt <> first_payment_date
    left join payments_by_dates
        on first_payments.user_id = payments_by_dates.user_id
        and dt = payment_date
    left join classes_by_dates
        on first_payments.user_id = classes_by_dates.user_id
        and dt = class_date
order by 1, 2 
limit 1000


9. Посмотрим, как менялось общее количество уроков на балансах 
студентов.
Для этого просуммируем поля `transaction_balance_change`, 
`transaction_balance_change_cs`, `classes`, `classes_cs`, 
`balance` из CTE `balances` с группировкой и сортировкой по 
`dt`.

with all_dates as

        (select distinct class_start_datetime::date as dt
        from skyeng_db.classes
        where date_part('year', class_start_datetime) = 2016)

, first_payments as

        (select user_id
            , min(transaction_datetime::date) as first_payment_date
        from skyeng_db.payments
        where status_name = 'success'
        group by 1) 

, payments_by_dates as

        (select user_id
            , transaction_datetime::date as payment_date
            , sum(classes) as transaction_balance_change
        from skyeng_db.payments
        where status_name = 'success'
        group by 1, 2)

, classes_by_dates as

        (select user_id
            , class_start_datetime::date as class_date
            , count(*)*-1 as classes
        from skyeng_db.classes
        where class_status in ('success', 'failed_by_student')
            and class_type != 'trial'
        group by 1, 2)

, balances as

        (select first_payments.user_id
            , dt
            , transaction_balance_change
            , sum(coalesce (transaction_balance_change))
              over (partition by first_payments.user_id order by dt) as transaction_balance_change_cs
            , classes
            , sum(coalesce (classes)) 
              over (partition by first_payments.user_id order by dt) as classes_cs
            , sum(coalesce (transaction_balance_change))
              over (partition by first_payments.user_id order by dt)
              +
              sum(coalesce (classes)) 
              over (partition by first_payments.user_id order by dt) as balance
        from all_dates
            join first_payments
                on dt = first_payment_date
                or dt <> first_payment_date
            left join payments_by_dates
                on first_payments.user_id = payments_by_dates.user_id
                and dt = payment_date
            left join classes_by_dates
                on first_payments.user_id = classes_by_dates.user_id
                and dt = class_date)

select dt
    , sum(transaction_balance_change) as transaction_balance_change_sum
    , sum(transaction_balance_change_cs) as transaction_balance_change_cs_sum
    , sum(classes) as classes_sum
    , sum(classes_cs) as classes_cs_sum
    , sum(coalesce (balance)) as balance_sum  

from balances
group by dt
order by dt 
